import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from dotenv import load_dotenv
import threading
import time
import json
import chess

load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
LICHESS_API_KEY = os.getenv("LICHESS_API_KEY")
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_TOKEN')

bot = telebot.TeleBot(TOKEN, parse_mode="HTML")


def create_open_challenge():
    headers = {
        "Authorization": f"Bearer {LICHESS_API_KEY}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
        "clock.limit": "300",
        "clock.increment": "30",
        "rated": "false"
    }
    response = requests.post("https://lichess.org/api/challenge/open", headers=headers, data=data)
    try:
        json_response = response.json()
        print("Lichess open challenge response:", json_response)
        return json_response.get("url")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ open challenge:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return None


def create_ai_challenge():
    headers = {
        "Authorization": f"Bearer {LICHESS_API_KEY}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
        "level": "8",
        "clock.limit": "600",
        "clock.increment": "5",
        "color": "white"
    }
    response = requests.post("https://lichess.org/api/challenge/ai", headers=headers, data=data)
    try:
        json_response = response.json()
        print("Lichess AI challenge response:", json_response)
        game_id = json_response.get("id")
        return f"https://lichess.org/{game_id}" if game_id else None
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ AI challenge:", e)
        print("–û—Ç–≤–µ—Ç:", response.text)
        return None

def wait_for_game_start(game_id, timeout=60):
    url = f"https://lichess.org/api/challenge/{game_id}"
    headers = {"Authorization": f"Bearer {LICHESS_API_KEY}"}
    start_time = time.time()
    while time.time() - start_time < timeout:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "started":
                return True
        time.sleep(2)
    return False

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")


@bot.message_handler(commands=['chess_with_friend'])
def chess_with_friend_handler(message):
    challenge_url = create_open_challenge()
    if not challenge_url:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é.")
        return
    bot.send_message(
        message.chat.id,
        f"üéØ <b>–°—ã–≥—Ä–∞–π —Å –¥—Ä—É–≥–æ–º!</b>\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–º—É —ç—Ç—É —Å—Å—ã–ª–∫—É, –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ –Ω–µ–π –ø–µ—Ä–µ–π–¥—ë—Ç ‚Äî –Ω–∞—á–Ω—ë—Ç—Å—è –ø–∞—Ä—Ç–∏—è: \n\n<a href=\"{challenge_url}\">{challenge_url}</a>",
        disable_web_page_preview=True
    )

@bot.message_handler(commands=['chess_vs_ai'])
def chess_vs_ai_handler(message):
    challenge_url = create_ai_challenge()
    if not challenge_url:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é —Å –ò–ò.")
        return
    bot.send_message(
        message.chat.id,
        f"ü§ñ <b>–°—ã–≥—Ä–∞–π —Å —Å–∏–ª—å–Ω—ã–º –ò–ò!</b>\n–ü–∞—Ä—Ç–∏—è –Ω–∞—á–Ω—ë—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ: \n\n<a href=\"{challenge_url}\">{challenge_url}</a>",
        disable_web_page_preview=True
    )
    game_id = challenge_url.rsplit('/', 1)[-1]
    threading.Thread(target=stream_game_and_comment, args=(game_id, message.chat.id), daemon=True).start()


commented_fens = set()

def comment_move_with_mistral(moves_fen: str) -> str:
    prompt = f"–ü–∏—à–∏ –≤—Å–µ–≥–¥–∞ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –∏ –ø—Ä–æ—á–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤. –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–∞—Ö–º–∞—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å —Ç–æ–ª—å–∫–æ –ø–æ —Ä—É—Å—Å–∫–∏. –¢—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—à—å –≤—Å–µ –¥–µ–±—é—Ç—ã, –ø–∞—Ä—Ç–∏–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ (10-20 —Å–ª–æ–≤), –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –±–µ–∑ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ –¥–æ—Å–∫–µ:\nFEN: {moves_fen}"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://openrouter.ai",
        "Content-Type": "application/json"
    }
    data = {
        "model": "microsoft/mai-ds-r1:free",
        "messages": [
            {"role": "system", "content": prompt},
            {"role": "user", "content": prompt}
        ]
    }
    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result['choices'][0]['message']['content']
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter:", e)
        return "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ò–ò."


def stream_game_and_comment(game_id, chat_id):
    url = f"https://lichess.org/api/board/game/stream/{game_id}"
    headers = {
        "Authorization": f"Bearer {LICHESS_API_KEY}"
    }
    board = chess.Board()
    try:
        print("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—Ç–æ–∫—É:", url)
        with requests.get(url, headers=headers, stream=True) as response:
            print("–û—Ç–≤–µ—Ç –æ—Ç Lichess:", response.status_code)
            for line in response.iter_lines():
                if line:
                    decoded = line.decode('utf-8')
                    print("–ü–æ–ª—É—á–µ–Ω–æ:", decoded)
                    if decoded.startswith('{'):
                        data = json.loads(decoded)
                        if data.get("type") == "gameState" and "moves" in data:
                            board.reset()
                            moves = data["moves"].split()
                            for move in moves:
                                try:
                                    board.push_uci(move)
                                except Exception as e:
                                    print("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ö–æ–¥:", move, e)
                            fen = board.fen()
                            if fen not in commented_fens:
                                commented_fens.add(fen)
                                bot.send_chat_action(chat_id, "typing")
                                comment = comment_move_with_mistral(fen)
                                bot.send_message(chat_id, f"üéôÔ∏è <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}")
                                time.sleep(2)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–∏–º–µ –ø–∞—Ä—Ç–∏–∏:", e)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)